%!PS-Adobe-3.0 EPSF-3.0
%Produced by poppler pdftops version: 22.05.0 (http://poppler.freedesktop.org)
%%Creator: Chromium
%%LanguageLevel: 3
%%DocumentSuppliedResources: (atend)
%%BoundingBox: 0 0 2394 2376
%%HiResBoundingBox: 0 0 2394 2376
%%DocumentSuppliedResources: (atend)
%%EndComments
%%BeginProlog
%%BeginResource: procset xpdf 3.00 0
%%Copyright: Copyright 1996-2011, 2022 Glyph & Cog, LLC
/xpdf 75 dict def xpdf begin
% PDF special state
/pdfDictSize 15 def
/pdfSetup {
  /setpagedevice where {
    pop 2 dict begin
      /Policies 1 dict dup begin /PageSize 6 def end def
      { /Duplex true def } if
    currentdict end setpagedevice
  } {
    pop
  } ifelse
} def
/pdfSetupPaper {
  % Change paper size, but only if different from previous paper size otherwise
  % duplex fails. PLRM specifies a tolerance of 5 pts when matching paper size
  % so we use the same when checking if the size changes.
  /setpagedevice where {
    pop currentpagedevice
    /PageSize known {
      2 copy
      currentpagedevice /PageSize get aload pop
      exch 4 1 roll
      sub abs 5 gt
      3 1 roll
      sub abs 5 gt
      or
    } {
      true
    } ifelse
    {
      2 array astore
      2 dict begin
        /PageSize exch def
        /ImagingBBox null def
      currentdict end
      setpagedevice
    } {
      pop pop
    } ifelse
  } {
    pop
  } ifelse
} def
/pdfStartPage {
  pdfDictSize dict begin
  /pdfFillCS [] def
  /pdfFillXform {} def
  /pdfStrokeCS [] def
  /pdfStrokeXform {} def
  /pdfFill [0] def
  /pdfStroke [0] def
  /pdfFillOP false def
  /pdfStrokeOP false def
  /pdfOPM false def
  /pdfLastFill false def
  /pdfLastStroke false def
  /pdfTextMat [1 0 0 1 0 0] def
  /pdfFontSize 0 def
  /pdfCharSpacing 0 def
  /pdfTextRender 0 def
  /pdfPatternCS false def
  /pdfTextRise 0 def
  /pdfWordSpacing 0 def
  /pdfHorizScaling 1 def
  /pdfTextClipPath [] def
} def
/pdfEndPage { end } def
% PDF color state
/opm { dup /pdfOPM exch def
      /setoverprintmode where{pop setoverprintmode}{pop}ifelse  } def
/cs { /pdfFillXform exch def dup /pdfFillCS exch def
      setcolorspace } def
/CS { /pdfStrokeXform exch def dup /pdfStrokeCS exch def
      setcolorspace } def
/sc { pdfLastFill not { pdfFillCS setcolorspace } if
      dup /pdfFill exch def aload pop pdfFillXform setcolor
     /pdfLastFill true def /pdfLastStroke false def } def
/SC { pdfLastStroke not { pdfStrokeCS setcolorspace } if
      dup /pdfStroke exch def aload pop pdfStrokeXform setcolor
     /pdfLastStroke true def /pdfLastFill false def } def
/op { /pdfFillOP exch def
      pdfLastFill { pdfFillOP setoverprint } if } def
/OP { /pdfStrokeOP exch def
      pdfLastStroke { pdfStrokeOP setoverprint } if } def
/fCol {
  pdfLastFill not {
    pdfFillCS setcolorspace
    pdfFill aload pop pdfFillXform setcolor
    pdfFillOP setoverprint
    /pdfLastFill true def /pdfLastStroke false def
  } if
} def
/sCol {
  pdfLastStroke not {
    pdfStrokeCS setcolorspace
    pdfStroke aload pop pdfStrokeXform setcolor
    pdfStrokeOP setoverprint
    /pdfLastStroke true def /pdfLastFill false def
  } if
} def
% build a font
/pdfMakeFont {
  4 3 roll findfont
  4 2 roll matrix scale makefont
  dup length dict begin
    { 1 index /FID ne { def } { pop pop } ifelse } forall
    /Encoding exch def
    currentdict
  end
  definefont pop
} def
/pdfMakeFont16 {
  exch findfont
  dup length dict begin
    { 1 index /FID ne { def } { pop pop } ifelse } forall
    /WMode exch def
    currentdict
  end
  definefont pop
} def
/pdfMakeFont16L3 {
  1 index /CIDFont resourcestatus {
    pop pop 1 index /CIDFont findresource /CIDFontType known
  } {
    false
  } ifelse
  {
    0 eq { /Identity-H } { /Identity-V } ifelse
    exch 1 array astore composefont pop
  } {
    pdfMakeFont16
  } ifelse
} def
% graphics state operators
/q { gsave pdfDictSize dict begin } def
/Q {
  end grestore
  /pdfLastFill where {
    pop
    pdfLastFill {
      pdfFillOP setoverprint
    } {
      pdfStrokeOP setoverprint
    } ifelse
  } if
  /pdfOPM where {
    pop
    pdfOPM /setoverprintmode where{pop setoverprintmode}{pop}ifelse 
  } if
} def
/cm { concat } def
/d { setdash } def
/i { setflat } def
/j { setlinejoin } def
/J { setlinecap } def
/M { setmiterlimit } def
/w { setlinewidth } def
% path segment operators
/m { moveto } def
/l { lineto } def
/c { curveto } def
/re { 4 2 roll moveto 1 index 0 rlineto 0 exch rlineto
      neg 0 rlineto closepath } def
/h { closepath } def
% path painting operators
/S { sCol stroke } def
/Sf { fCol stroke } def
/f { fCol fill } def
/f* { fCol eofill } def
% clipping operators
/W { clip newpath } def
/W* { eoclip newpath } def
/Ws { strokepath clip newpath } def
% text state operators
/Tc { /pdfCharSpacing exch def } def
/Tf { dup /pdfFontSize exch def
      dup pdfHorizScaling mul exch matrix scale
      pdfTextMat matrix concatmatrix dup 4 0 put dup 5 0 put
      exch findfont exch makefont setfont } def
/Tr { /pdfTextRender exch def } def
/Tp { /pdfPatternCS exch def } def
/Ts { /pdfTextRise exch def } def
/Tw { /pdfWordSpacing exch def } def
/Tz { /pdfHorizScaling exch def } def
% text positioning operators
/Td { pdfTextMat transform moveto } def
/Tm { /pdfTextMat exch def } def
% text string operators
/xyshow where {
  pop
  /xyshow2 {
    dup length array
    0 2 2 index length 1 sub {
      2 index 1 index 2 copy get 3 1 roll 1 add get
      pdfTextMat dtransform
      4 2 roll 2 copy 6 5 roll put 1 add 3 1 roll dup 4 2 roll put
    } for
    exch pop
    xyshow
  } def
}{
  /xyshow2 {
    currentfont /FontType get 0 eq {
      0 2 3 index length 1 sub {
        currentpoint 4 index 3 index 2 getinterval show moveto
        2 copy get 2 index 3 2 roll 1 add get
        pdfTextMat dtransform rmoveto
      } for
    } {
      0 1 3 index length 1 sub {
        currentpoint 4 index 3 index 1 getinterval show moveto
        2 copy 2 mul get 2 index 3 2 roll 2 mul 1 add get
        pdfTextMat dtransform rmoveto
      } for
    } ifelse
    pop pop
  } def
} ifelse
/cshow where {
  pop
  /xycp {
    0 3 2 roll
    {
      pop pop currentpoint 3 2 roll
      1 string dup 0 4 3 roll put false charpath moveto
      2 copy get 2 index 2 index 1 add get
      pdfTextMat dtransform rmoveto
      2 add
    } exch cshow
    pop pop
  } def
}{
  /xycp {
    currentfont /FontType get 0 eq {
      0 2 3 index length 1 sub {
        currentpoint 4 index 3 index 2 getinterval false charpath moveto
        2 copy get 2 index 3 2 roll 1 add get
        pdfTextMat dtransform rmoveto
      } for
    } {
      0 1 3 index length 1 sub {
        currentpoint 4 index 3 index 1 getinterval false charpath moveto
        2 copy 2 mul get 2 index 3 2 roll 2 mul 1 add get
        pdfTextMat dtransform rmoveto
      } for
    } ifelse
    pop pop
  } def
} ifelse
/Tj {
  fCol
  0 pdfTextRise pdfTextMat dtransform rmoveto
  currentpoint 4 2 roll
  pdfTextRender 1 and 0 eq {
    2 copy xyshow2
  } if
  pdfTextRender 3 and dup 1 eq exch 2 eq or {
    3 index 3 index moveto
    2 copy
    currentfont /FontType get 3 eq { fCol } { sCol } ifelse
    xycp currentpoint stroke moveto
  } if
  pdfTextRender 4 and 0 ne {
    4 2 roll moveto xycp
    /pdfTextClipPath [ pdfTextClipPath aload pop
      {/moveto cvx}
      {/lineto cvx}
      {/curveto cvx}
      {/closepath cvx}
    pathforall ] def
    currentpoint newpath moveto
  } {
    pop pop pop pop
  } ifelse
  0 pdfTextRise neg pdfTextMat dtransform rmoveto
} def
/TJm { 0.001 mul pdfFontSize mul pdfHorizScaling mul neg 0
       pdfTextMat dtransform rmoveto } def
/TJmV { 0.001 mul pdfFontSize mul neg 0 exch
        pdfTextMat dtransform rmoveto } def
/Tclip { pdfTextClipPath cvx exec clip newpath
         /pdfTextClipPath [] def } def
/Tclip* { pdfTextClipPath cvx exec eoclip newpath
         /pdfTextClipPath [] def } def
% Level 2/3 image operators
/pdfImBuf 100 string def
/pdfImStr {
  2 copy exch length lt {
    2 copy get exch 1 add exch
  } {
    ()
  } ifelse
} def
/skipEOD {
  { currentfile pdfImBuf readline
    not { pop exit } if
    (%-EOD-) eq { exit } if } loop
} def
/pdfIm { image skipEOD } def
/pdfMask {
  /ReusableStreamDecode filter
  skipEOD
  /maskStream exch def
} def
/pdfMaskEnd { maskStream closefile } def
/pdfMaskInit {
  /maskArray exch def
  /maskIdx 0 def
} def
/pdfMaskSrc {
  maskIdx maskArray length lt {
    maskArray maskIdx get
    /maskIdx maskIdx 1 add def
  } {
    ()
  } ifelse
} def
/pdfImM { fCol imagemask skipEOD } def
/pr { 2 index 2 index 3 2 roll putinterval 4 add } def
/pdfImClip {
  gsave
  0 2 4 index length 1 sub {
    dup 4 index exch 2 copy
    get 5 index div put
    1 add 3 index exch 2 copy
    get 3 index div put
  } for
  pop pop rectclip
} def
/pdfImClipEnd { grestore } def
% shading operators
/colordelta {
  false 0 1 3 index length 1 sub {
    dup 4 index exch get 3 index 3 2 roll get sub abs 0.004 gt {
      pop true
    } if
  } for
  exch pop exch pop
} def
/funcCol { func n array astore } def
/funcSH {
  dup 0 eq {
    true
  } {
    dup 6 eq {
      false
    } {
      4 index 4 index funcCol dup
      6 index 4 index funcCol dup
      3 1 roll colordelta 3 1 roll
      5 index 5 index funcCol dup
      3 1 roll colordelta 3 1 roll
      6 index 8 index funcCol dup
      3 1 roll colordelta 3 1 roll
      colordelta or or or
    } ifelse
  } ifelse
  {
    1 add
    4 index 3 index add 0.5 mul exch 4 index 3 index add 0.5 mul exch
    6 index 6 index 4 index 4 index 4 index funcSH
    2 index 6 index 6 index 4 index 4 index funcSH
    6 index 2 index 4 index 6 index 4 index funcSH
    5 3 roll 3 2 roll funcSH pop pop
  } {
    pop 3 index 2 index add 0.5 mul 3 index  2 index add 0.5 mul
    funcCol sc
    dup 4 index exch mat transform m
    3 index 3 index mat transform l
    1 index 3 index mat transform l
    mat transform l pop pop h f*
  } ifelse
} def
/axialCol {
  dup 0 lt {
    pop t0
  } {
    dup 1 gt {
      pop t1
    } {
      dt mul t0 add
    } ifelse
  } ifelse
  func n array astore
} def
/axialSH {
  dup 0 eq {
    true
  } {
    dup 8 eq {
      false
    } {
      2 index axialCol 2 index axialCol colordelta
    } ifelse
  } ifelse
  {
    1 add 3 1 roll 2 copy add 0.5 mul
    dup 4 3 roll exch 4 index axialSH
    exch 3 2 roll axialSH
  } {
    pop 2 copy add 0.5 mul
    axialCol sc
    exch dup dx mul x0 add exch dy mul y0 add
    3 2 roll dup dx mul x0 add exch dy mul y0 add
    dx abs dy abs ge {
      2 copy yMin sub dy mul dx div add yMin m
      yMax sub dy mul dx div add yMax l
      2 copy yMax sub dy mul dx div add yMax l
      yMin sub dy mul dx div add yMin l
      h f*
    } {
      exch 2 copy xMin sub dx mul dy div add xMin exch m
      xMax sub dx mul dy div add xMax exch l
      exch 2 copy xMax sub dx mul dy div add xMax exch l
      xMin sub dx mul dy div add xMin exch l
      h f*
    } ifelse
  } ifelse
} def
/radialCol {
  dup t0 lt {
    pop t0
  } {
    dup t1 gt {
      pop t1
    } if
  } ifelse
  func n array astore
} def
/radialSH {
  dup 0 eq {
    true
  } {
    dup 8 eq {
      false
    } {
      2 index dt mul t0 add radialCol
      2 index dt mul t0 add radialCol colordelta
    } ifelse
  } ifelse
  {
    1 add 3 1 roll 2 copy add 0.5 mul
    dup 4 3 roll exch 4 index radialSH
    exch 3 2 roll radialSH
  } {
    pop 2 copy add 0.5 mul dt mul t0 add
    radialCol sc
    encl {
      exch dup dx mul x0 add exch dup dy mul y0 add exch dr mul r0 add
      0 360 arc h
      dup dx mul x0 add exch dup dy mul y0 add exch dr mul r0 add
      360 0 arcn h f
    } {
      2 copy
      dup dx mul x0 add exch dup dy mul y0 add exch dr mul r0 add
      a1 a2 arcn
      dup dx mul x0 add exch dup dy mul y0 add exch dr mul r0 add
      a2 a1 arcn h
      dup dx mul x0 add exch dup dy mul y0 add exch dr mul r0 add
      a1 a2 arc
      dup dx mul x0 add exch dup dy mul y0 add exch dr mul r0 add
      a2 a1 arc h f
    } ifelse
  } ifelse
} def
end
%%EndResource
/CIDInit /ProcSet findresource begin
10 dict begin
  begincmap
  /CMapType 1 def
  /CMapName /Identity-H def
  /CIDSystemInfo 3 dict dup begin
    /Registry (Adobe) def
    /Ordering (Identity) def
    /Supplement 0 def
  end def
  1 begincodespacerange
    <0000> <ffff>
  endcodespacerange
  0 usefont
  1 begincidrange
    <0000> <ffff> 0
  endcidrange
  endcmap
  currentdict CMapName exch /CMap defineresource pop
end
10 dict begin
  begincmap
  /CMapType 1 def
  /CMapName /Identity-V def
  /CIDSystemInfo 3 dict dup begin
    /Registry (Adobe) def
    /Ordering (Identity) def
    /Supplement 0 def
  end def
  /WMode 1 def
  1 begincodespacerange
    <0000> <ffff>
  endcodespacerange
  0 usefont
  1 begincidrange
    <0000> <ffff> 0
  endcidrange
  endcmap
  currentdict CMapName exch /CMap defineresource pop
end
end
%%EndProlog
%%BeginSetup
xpdf begin
%%EndSetup
pdfStartPage
%%EndPageSetup
[] 0 d
1 i
0 j
0 J
10 M
1 w
/DeviceGray {} cs
[0] sc
/DeviceGray {} CS
[0] SC
false op
false OP
{} settransfer
0 0 2394 2376 re
W
q
[0.24 0 0 -0.24 0 2376] cm
q
0 0 9975 9900 re
W*
q
[91.9897 0 0 91.996056 304.09747 299.17719] cm
/DeviceRGB {} CS
[0 0.3765 0.8392] SC
/DeviceRGB {} cs
[0 0.3765 0.8392] sc
101.800003 83.599998 m
101.600006 54.099998 l
101.600006 48.099998 101.700005 41.899998 101.400009 36.099998 c
101.300011 33.599998 101.300011 30.999998 101.300011 28.299999 c
101.300011 23.599998 101.200012 19.299999 100.900009 15.099999 c
100.700012 10.9 l
100.600014 8.2 100.500015 5.599999 100.400009 2.9 c
100.400009 1 l
93.100006 1 l
77.199997 0.7 l
66.599998 0.7 l
64.74501 0.701508 62.911678 0.901508 61.099998 1.3 c
60.5 1.6 l
49.799999 1.6 l
49.700001 1.4 49 1.3 47.599998 1.2 c
34.299999 0.3 l
28.03093 -0.119242 21.764263 -0.085909 15.5 0.4 c
12.3 0.6 9 0.8 4.6 0.9 c
1.5 0.5 l
0.4 0.5 l
0.4 1.7 l
0.2 3.7 0.1 6 0.1 8.7 c
0.1 11.4 0.1 15.5 -0 18.9 c
-0.1 22.299999 -0 24.200001 -0 26.9 c
-0.05565 29.21096 0.077683 31.510962 0.4 33.799999 c
0.569595 34.759468 0.669595 35.726135 0.7 36.700001 c
0.8 40.5 1.1 41.5 1.5 42.200001 c
1.5 59.800003 l
1.3 60.300003 l
1.4 64.300003 1.2 67.900002 1.1 71.600006 c
0.8 79.000008 0.7 86.600006 1 94.100006 c
1.008181 95.749512 1.174848 97.382843 1.5 99.000008 c
1.5 99.800011 l
6 99.800011 l
5.8 100.000008 l
11.200001 100.000008 l
14.077962 99.890518 16.944628 100.023849 19.800001 100.400009 c
21.057598 100.614899 22.324265 100.714897 23.6 100.700012 c
30.200001 100.600014 36.299999 100.800011 42.5 101.100014 c
49.200001 101.100014 l
63.099998 100.800011 l
69.199997 100.700012 75 100.300011 81.399994 100.300011 c
91.099991 100.300011 l
94.599991 100.100014 l
97.399994 99.600014 l
99.699997 99.600014 l
99.699997 98.600014 l
100 100.200012 100.299995 100.000015 100.699997 97.800011 c
100.799995 97.200012 100.899994 96.500008 101 95.800011 c
101.100006 95.100014 101.300003 93.200012 101.5 92.400009 c
101.852669 89.475288 101.952675 86.541954 101.800003 83.600006 c
101.800003 83.599998 l
h
f
Q
q
[27.367691 0 0 27.369579 3616.6455 2361.2683] cm
/DeviceRGB {} CS
[1 1 1] SC
/DeviceRGB {} cs
[1 1 1] sc
46.299999 75.900002 m
43.200001 76.200005 40.799999 75.599998 38.799999 74.099998 c
35.700001 71.799995 35.399998 68.099998 35.399998 67.900002 c
35.399998 67.200005 35.899998 66.599998 36.599998 66.5 c
37.299999 66.5 37.899998 67 38 67.699997 c
38 67.799995 38.200001 70.399994 40.400002 72 c
42.200001 73.300003 44.900002 73.599998 48.400002 72.900002 c
49.100002 72.700005 49.800003 73.200005 49.900002 73.900002 c
50.100002 74.599998 49.600002 75.300003 48.900002 75.400002 c
48 75.699997 47.099998 75.800003 46.299999 75.900002 c
h
f
72.300003 48.099998 m
72.100006 48.099998 71.900002 48.099998 71.700005 48.199997 c
70.900002 46.499996 69.100006 45.399998 67.100006 45.399998 c
56.5 45.399998 l
55.400002 45.399998 54.400002 45.699997 53.599998 46.299999 c
52.599998 45.799999 51.399998 45.399998 49.899998 45.299999 c
48.399998 45.299999 46.899998 45.599998 45.499996 46.299999 c
44.699997 45.700001 43.599995 45.299999 42.499996 45.299999 c
31.9 45.299999 l
29.9 45.299999 28.1 46.5 27.299999 48.200001 c
27.099998 48.200001 27 48.100002 26.799999 48.100002 c
25.9 48.100002 25.199999 48.800003 25.199999 49.700001 c
25.199999 51.200001 l
25.199999 52.100002 25.9 52.799999 26.799999 52.799999 c
26.799999 55.299999 l
26.799999 58.099998 29.099998 60.399998 31.9 60.399998 c
42.5 60.399998 l
45.299999 60.399998 47.599998 58.099998 47.599998 55.299999 c
47.599998 50.200001 l
47.599998 49.900002 47.599998 49.700001 47.5 49.400002 c
48.299999 49.100002 49 48.900002 49.700001 49 c
50.299999 49 50.900002 49.200001 51.400002 49.400002 c
51.300003 49.700001 51.300003 50 51.300003 50.300003 c
51.300003 55.400002 l
51.300003 58.200001 53.600002 60.5 56.400002 60.5 c
67 60.5 l
69.800003 60.5 72.099998 58.200001 72.099998 55.400002 c
72.099998 52.700001 l
72.099998 52.700001 72.099998 52.700001 72.199997 52.700001 c
73.099998 52.700001 73.799995 52 73.799995 51.100002 c
73.799995 49.600002 l
73.900002 48.799999 73.199997 48.099998 72.300003 48.099998 c
h
f
79.300003 49.599998 m
78.200005 45.899998 76.300003 42.599998 74 39.699997 c
72.800003 39.699997 71.300003 39.699997 69.699997 39.599998 c
73 42.899998 75.399994 47.099998 76.599998 51.899998 c
77.099998 53.699997 l
78.799995 52.999996 l
78.999992 52.899998 79.199997 52.899998 79.399994 52.799995 c
81.199997 52.599995 83.499992 55.299995 83.799995 59.399994 c
84.199997 63.499992 82.399994 66.499992 80.599998 66.599991 c
80 66.699989 79.400002 66.399994 78.799995 65.899994 c
77 64.400002 l
76.300003 66.700005 l
73 77.300003 63.700005 84.700005 52.700005 85.700005 c
38.900005 86.900002 26.400005 77.600006 23.700005 64 c
23.400005 62.5 l
21.900005 62.799999 l
21.700005 62.799999 l
19.800005 63 17.400005 60.099998 17.000004 55.700001 c
16.600004 51.299999 18.500004 48.100002 20.400003 47.900002 c
21.300003 47.800003 22.100004 48.400002 22.600004 48.900002 c
24.300005 50.600002 l
25.200005 48.400002 l
26.200005 46 28.900005 42 28.900005 42 c
28.900005 42 26.600006 42.700001 25.300005 42.799999 c
25.000006 42.799999 24.800005 42.799999 24.500006 42.799999 c
24.000006 43.599998 23.500006 44.399998 23.100006 45.299999 c
22 44.799999 21 44.599998 20 44.700001 c
16 45.100002 13.2 50 13.7 56 c
14.2 61.400002 17.200001 65.5 20.700001 66 c
24.300001 80.5 37.900002 90.300003 52.900002 89 c
64.599998 88 74.5 80.400002 78.600006 69.5 c
79.300003 69.800003 80.100006 69.900002 80.800003 69.800003 c
84.700005 69.5 87.400002 64.700005 86.900002 59.100002 c
86.5 53.400002 83.099998 49.299999 79.300003 49.599998 c
h
f
48 14.9 m
47.599998 11.7 l
47.5 10.8 46.599998 10.099999 45.699997 10.2 c
44.799995 10.3 44.099998 11.2 44.199997 12.1 c
44.599998 15.3 l
27.299999 18 14.499998 27.299999 15.699999 36.400002 c
16.099999 39.200001 17.799999 41.700001 20.399998 43.800003 c
23.799997 39.300003 35 34.900002 48.699997 33.100002 c
62.099998 31.300003 73.799995 32.600002 78.5 35.900002 c
80.400002 33.300003 81.300003 30.600002 80.900002 27.800001 c
79.599998 18.799999 65.099998 13.2 48 14.9 c
h
f
Q
q
[57.608665 0 0 57.61264 1897.0493 4960.2021] cm
/DeviceRGB {} CS
[1 1 1] SC
/DeviceRGB {} cs
[1 1 1] sc
1.44 40 m
6.44 11.6 l
2.44 11.6 l
3.08 8 l
15.08 8 l
14.44 11.6 l
10.44 11.6 l
5.44 40 l
1.44 40 l
1.44 40 l
h
12.34 40 m
15.3 23.200001 l
17.26 12.040001 18.059999 7.64 24.060001 7.64 c
30.060003 7.64 29.260002 12.040001 27.300001 23.200001 c
24.34 40 l
20.34 40 l
21.98 30.799999 l
17.98 30.799999 l
16.34 40 l
12.34 40 l
h
18.540001 27.6 m
22.540001 27.6 l
23.300001 23.200001 l
25.140001 12.800001 25.460001 10.840001 23.460001 10.840001 c
21.460001 10.840001 21.140001 12.800001 19.300001 23.200001 c
18.540001 27.6 l
h
28.84 40 m
34.48 8 l
38.48 8 l
36.239998 20.68 l
42.479996 8 l
46.479996 8 l
38.999996 23.200001 l
40.839996 40 l
36.839996 40 l
35.319996 26 l
32.839996 40 l
28.839996 40 l
28.84 40 l
h
43.740002 40 m
49.380001 8 l
58.580002 8 l
58.02 11.2 l
52.82 11.2 l
50.98 21.599998 l
55.380001 21.599998 l
54.82 24.799999 l
50.419998 24.799999 l
48.459999 36 l
53.66 36 l
52.939999 40 l
43.739998 40 l
43.740002 40 l
h
56.240002 40 m
61.880001 8 l
65.480003 8 l
66.160004 28 l
66.560005 28 l
74.280006 8 l
77.880005 8 l
72.240005 40 l
68.240005 40 l
71.040009 24 l
65.400009 40 l
63.000008 40 l
63.040009 24 l
60.240009 40 l
56.240009 40 l
56.240002 40 l
h
76.739998 40 m
82.379997 8 l
91.579994 8 l
91.019997 11.2 l
85.82 11.2 l
83.980003 21.599998 l
88.380005 21.599998 l
87.820007 24.799999 l
83.420006 24.799999 l
81.460007 36 l
86.660004 36 l
85.940002 40 l
76.740005 40 l
76.739998 40 l
h
89.239998 40 m
94.879997 8 l
100.879997 8 l
106.879997 8 106.119995 12.4 104.199997 23.16 c
102.039993 35.559998 101.239998 40 95.239998 40 c
89.239998 40 l
h
93.959999 36 m
95.959999 36 l
98.199997 36 98.479996 34.32 100.440002 23.16 c
102.200005 13.16 102.560005 11.2 100.32 11.2 c
98.32 11.2 l
93.959999 36 l
h
f
Q
Q
Q
showpage
%%PageTrailer
pdfEndPage
%%Trailer
end
%%DocumentSuppliedResources:
%%EOF
